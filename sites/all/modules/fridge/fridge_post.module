<?php

define('FRIDGE_POST_PERM_OVERRIDE_NODE', 'fridge_override_node');
define('FRIDGE_POST_PERM_OVERRIDE_COMMENT', 'fridge_override_comment');

/**
 * Implements hook_permission().
 */
function fridge_post_permission() {
  return array(
    FRIDGE_POST_PERM_OVERRIDE_NODE => array(
      'title' => t('Override default settings when posting content.'),
    ),
    FRIDGE_POST_PERM_OVERRIDE_COMMENT => array(
      'title' => t('Override default settings when posting comments.'),
    ),
  );
}


define('FRIDGE_POST_PATH_ADMIN', FRIDGE_PATH_ADMIN_CONFIG . '/fridge_post');

/**
 * Implements hook_menu().
 */
function fridge_post_menu() {
  $items = array();

  // Administration

  $items[FRIDGE_POST_PATH_ADMIN] = array(
    'title' => 'Post to Facebook',
    'description' => 'Site-wide connection to Facebook.com.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fridge_post_admin_form'),
    'access arguments' => array(FRIDGE_PERM_ADMINISTER),
    'type' => MENU_LOCAL_TASK,
    'file' => 'fridge_post.admin.inc',
    'file path' => drupal_get_path('module', 'fridge_post'),
  );

  // Per-node administration.
  $items['node/%node/fridge'] = array(
    'title' => 'Facebook',
    'page callback' => 'fridge_post_entity_page',
    'page arguments' => array('node', 1),
    'access arguments' => array(FRIDGE_PERM_ADMINISTER),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,  // More than basic tabs, less than devel (devel is 100)
  );


  return $items;
}

function fridge_post_entity_page($type, $entity) {

  $token = fridge_admin_token();

  if (!isset($entity->fridge_post_graph) || !count($entity->fridge_post_graph)) {
    $output['fridge_post_status'] = array(
      '#markup' => t('Not posted to facebook.'),
      '#prefix' => '<p>', '#suffix' => '</p>',
    );
  }
  else {
    $output['fridge_post_status'] = array(
      '#markup' => t('Posted to facebook %count times.', array('%count' => count($entity->fridge_post_graph))),
      '#prefix' => '<p>', '#suffix' => '</p>',
    );
    /* How to generate this link????
    foreach ($entity->fridge_post_graph as $row) {
      $url = "http://graph.facebook.com/" . $row->graph_id . '/link';
      $output['fridge_post_posts'][$row->graph_id] = array(
        // @TODO - better markup.
        '#markup' => l($row->graph_id, $url, array(
                         //'query' => array('access_token' => $token))),
        '#prefix' => '<p>', '#suffix' => '</p>',
      );
    }
    */
  }

  // Provide a post to facebook link.
  if ($user_token = fridge_user_token()) {
    $this_page = url("node/$node->nid", array('absolute' => TRUE));
    $url = url("http://www.facebook.com/dialog/feed", array(
                 'external' => TRUE,
                 'query' => array(
                   'display' => 'popup',
                   'app_id' => $app['client_id'],
                   'redirect_uri' => $this_page,
                   'access_token' => $user_token,
                 ),
               ));
    $output['fridge_post_link'] = array(
      '#markup' => t('<a href="!url">Post to Facebook via your facebook account</a>.', array(
                       '!url' => $url,
                     )),
      '#prefix' => '<p>', '#suffix' => '</p>',
    );
    // @TODO - if user has posted, save to fridge_post_graph table!
  }

  // Allow post using site-wide settings.
  $output['fridge_post_form'] = drupal_get_form('fridge_post_entity_publish_form', $entity);

  return $output;
}

function fridge_post_entity_load($entities, $type) {

  foreach ($entities as $id => $entity) {
    $entity->fridge_post_graph = db_select('fridge_post_graph')
      ->fields('fridge_post_graph', array('graph_id', 'actor_id'))
      ->condition('entity_type', $type)
      ->condition('entity_id', $id)
      ->execute()
      ->fetchAll();
  }
}




function fridge_post_publish_node($options, $node) {
  try {
    $node_url = url("node/$node->nid", array('absolute' => TRUE));

    $params = array(
      'access_token' => $options['access_token'],
      'message' => $options['message'],
      'link' => $node_url,
      'name' => $node->title,
      'description' => $node->title,
      'actions' => json_encode(array(
                                 'name' => 'View More',
                                 'link' => $node_url,
                               )),
    );
    // @TODO invoke drupal_alter()

    if (!$params['access_token']) {
      drupal_set_message(t('Post to Facebook failed.  No authorization.'), 'error');
      return;
    }

    // A common problem is "#100 link URL is not properly formatted"
    // @TODO Not sure what the test should be...
    if (strpos($params['link'], "http://local") === 0) {
      unset($params['link']);
    }

    $result = fridge_graph_post($options['feed_id'] . '/feed', $params);

    if ($id = $result['id']) {
      db_insert('fridge_post_graph')->fields(array(
                                          'entity_id' => $node->nid,
                                          'entity_type' =>'node',
                                          'graph_id' => $id,
                                        ))->execute();
      $msg = "Posted <a href=!node_url>%title</a> to <a href=!feed_url>facebook</a>.";
      $args = array(
        '!node_url' => $node_url,
        '%title' => $node->title,
        '!feed_url' => url("http://facebook.com/profile.php", array(
                             'external' => TRUE,
                             'query' => array(
                               'id' => $options['feed_id'],
                               'sk' => 'wall',
                             ),
                           )),
      );
      watchdog('fridge', $msg, $args);
      drupal_set_message(t($msg, $args));
    }
    return $result;
  }
  catch (Exception $e) {
    $msg = "Could not post <a href=!node_url>%title</a> to <a href=!feed_url>facebook</a>.  %error";
    $args = array(
      '%error' => $e->getMessage(),
      '!node_url' => $node_url,
      '%title' => $node->title,
      // How to properly generate facebook url???
      '!feed_url' => url("http://facebook.com/profile.php", array(
                           'external' => TRUE,
                           'query' => array(
                             'id' => $options['feed_id'],
                             'sk' => 'wall',
                           ),
                         )),
    );
    watchdog('fridge', $msg, $args, WATCHDOG_ERROR);
    drupal_set_message(t($msg, $args), 'error');
  }
}



/**
 * Implements hook_node_insert().
 */
function fridge_post_node_insert($node) {
  if (isset($node->fridge_post_settings) && $node->fridge_post_settings['status']) {
    // Using site-wide settings.
    $result = fridge_post_publish_node($node->fridge_post_settings, $node);
  }
  if (isset($node->fridge_post_user_settings) && $node->fridge_post_user_settings['status']) {
    // Using user specific settings.
    $result = fridge_post_publish_node($node->fridge_post_user_settings, $node);
  }
}

/**
 * Implements hook_node_update().
 */
function fridge_post_node_update($node) {
  if (isset($node->fridge_post_settings) && $node->fridge_post_settings['status']) {
    // Using site-wide settings.
    $result = fridge_post_publish_node($node->fridge_post_settings, $node);
  }
  if (isset($node->fridge_post_user_settings) && $node->fridge_post_user_settings['status']) {
    // Using user specific settings.
    $result = fridge_post_publish_node($node->fridge_post_user_settings, $node);
  }
}


function fridge_post_form_alter(&$form, $form_state, $form_id) {
  //dpm($form, $form_id); // debug
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function fridge_post_form_node_type_form_alter(&$form, $form_state) {

  if (isset($form['type'])) {
    $form['fridge_post_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Post to Facebook'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'additional_settings',
      '#attributes' => array(
        'class' => array('fridge-node-type-settings-form'),
      ),
      '#attached' => array(
        //'js' => array(drupal_get_path('module', 'comment') . '/comment-node-form.js'),
      ),
    );
    $fake_node = new stdClass();
    $fake_node->type = $form['#node_type']->type;
    if ($token = variable_get('fridge_access_token', NULL)) {
      $form['fridge_post_settings']['fridge_post_settings'] = _fridge_post_node_settings_form(array(), $form_state, $fake_node, $token);
      $form['#submit'][] = 'fridge_post_node_type_settings_submit';


      $form['fridge_post_settings']['fridge'] = array(
        '#markup' => t('Don\'t see the options you expected?  Change the <a href=!url target=_blank><em>Post to Facebook</em> settings</a>, then refresh this form.', array(
                         '!url' => url(FRIDGE_POST_PATH_ADMIN),
                       )),
        '#prefix' => '<p>', '#suffix' => '</p>',
      );
    }
    else {
      $form['fridge_post_settings']['fridge'] = array(
        '#markup' => t('<a href=!url target=_blank>Configure settings</a>, then refresh this form to see all options.', array(
                         '!url' => url(FRIDGE_POST_PATH_ADMIN),
                       )),
        '#prefix' => '<p>', '#suffix' => '</p>',
      );
    }

    $form['fridge_post_settings']['more'] = array(
      '#markup' => t('Users with <a href=!url target=_blank>permission to override default settings</a> will be able to post to their own facebook accounts and pages.', array(
                       '!url' => url('admin/people/permissions', array('fragment' => 'module-fridge')),
                       )),
      '#prefix' => '<p>', '#suffix' => '</p>',
    );
  }
  return $form;
}

function fridge_post_node_type_settings_submit($form, &$form_state) {
  // Drupal will not save our array of settings automatically.
  if ($form_state['values']['fridge_post_settings']) {
    variable_set('fridge_post_settings_' . $form_state['values']['type'] . '_array',
                 $form_state['values']['fridge_post_settings']);
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 * Implements hook_form_node_form_alter().
 */
function fridge_post_form_node_form_alter(&$form, $form_state) {
  $node = $form['#node'];

  $token = variable_get('fridge_access_token', NULL);
  // Site-wide option to publish
  $form['fridge_post_settings'] = array(
    '#type' => 'fieldset',
    '#access' => user_access(FRIDGE_PERM_ADMINISTER) || user_access(FRIDGE_POST_PERM_OVERRIDE_NODE),
    '#title' => t('Post to Facebook'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'additional_settings',
    '#attributes' => array(
      'class' => array('fridge-node-settings-form'),
    ),
    '#attached' => array(
      //'js' => array(drupal_get_path('module', 'comment') . '/comment-node-form.js'),
     ),
    //'#weight' => 30,
  );

  if (user_access(FRIDGE_PERM_ADMINISTER)) {
    $form['fridge_post_settings']['site-wide'] = array(
      '#type' => 'fieldset',
      '#title' => t('Override site-wide defaults'),
      '#description' => t('Override site-wide defaults.'),
    );
    if ($token) {
      $form['fridge_post_settings']['site-wide']['fridge_post_settings'] = _fridge_post_node_settings_form(array(), $form_state, $node, $token);
    }
    else {
      $form['fridge_post_settings']['site-wide']['fridge'] = array(
        '#markup' => t('<a href=!url target=_blank>Configure settings</a> for site-wide publishing options.', array(
                         '!url' => url(FRIDGE_POST_PATH_ADMIN),
                       )),
        '#prefix' => '<p>', '#suffix' => '</p>',
      );
    }
  }

  // User-specific options
  $user_token = fridge_user_token();

  if ($user_token && $user_token == $token) {
    // Don't show second settings when same token.
  }
  elseif (user_access(FRIDGE_POST_PERM_OVERRIDE_NODE)) {

    $form['fridge_post_settings']['fridge_post_user_none'] = array(
      '#markup' => t('<a href=!url target=_blank>Authorize the application</a> to see your publishing options.', array(
                       '!url' => url('fridge/token'),
                     )),
      '#prefix' => '<p class="fridge_status_none">', '#suffix' => '</p>',
    );
    $form['fridge_post_settings']['fridge_post_user_unknown'] = array(
      '#markup' => t('<span class="fb-login-button" data-scope="publish_stream" data-show-faces="false" data-width="200" data-max-rows="1">Connect</span> to see your publishing options.', array(
                       //'!url' => url('fridge/token'),
                     )),
      '#prefix' => '<p class="fridge_status_unknown">', '#suffix' => '</p>',
    );


    if ($user_token) {
      $form['fridge_post_settings']['fridge_post_user_settings'] = _fridge_post_node_settings_form(array(), $form_state, $node, $user_token);
      $form['fridge_post_settings']['fridge_post_user_settings']['#prefix'] = '<div class="fridge_status_connected">';
      $form['fridge_post_settings']['fridge_post_user_settings']['#suffix'] = '</div>';
    }
    else {

      $form['fridge_post_settings']['fridge_post_user_connected'] = array(
        '#markup' => t('Connected as !name.  Reload (or press preview button) to see posting options.', array(
                         '!name' => '<fb:name useyou=false linked=false uid=loggedinuser></fb:name>',
                       )),
        '#prefix' => '<p class="fridge_status_connected">', '#suffix' => '</p>',
      );
    }
  }
}

/**
 * Helper for the node submission form and the node type form.
 */
function _fridge_post_node_settings_form($form, &$form_state, $node, $token) {
  if ($token == variable_get('fridge_access_token', 'no token')) {
    // Site-wide defaults.
    $defaults = variable_get('fridge_post_settings_' . $node->type . '_array', array(
                               'status' => FALSE, // Don't post by default.
                               'message' => '',
                               'feed_id' => NULL,
                               'account_id' => NULL,
                             ));
  }
  else {
    // @TODO - user-specific defaults
    $defaults = array(
      'status' => FALSE,
      'message' => '',
      'feed_id' => NULL,
      'account_id' => NULL,
    );
  }

  try {
    // Ideally, we would batch graph queries into one request.  Not possible with 'me/accounts', unfortunatly.
    $me = fridge_graph('me', $token);
    //$perms = fridge_fql("SELECT publish_stream,manage_pages, offline_access FROM permissions WHERE uid=$me[id]");
    //dpm($perms[0], __FUNCTION__);
    $accounts = fridge_graph('me/accounts', $token);
    //dpm($accounts);

    $page_options = array(
      $me['id'] => $me['name'],
    );

    foreach ($accounts['data'] as $account) {
      // @TODO add only if access_token found
      if (!isset($account['name'])) {
        // @TODO handle applications more smarter.
        $name = $account['category'] . ' ' . $account['id'];
      }
      else {
        $name = $account['name'];
      }
      $page_options[$account['id']] = $name;
    }

    // TODO defaults

    $form['#tree'] = TRUE;
    /*
      $form['label'] = array(
      '#type' => 'textfield',
      '#title' => 'label',
      );
    */

    $form['status'] = array(
      '#type' => 'checkbox',
      '#title' => t('Post a link to this %type on Facebook.', array('%type' => $node->type)),
      //'#description' => 'Uncheck to not post.',
      '#default_value' => $defaults['status'],
    );

    // Don't publish again, unless explicitly asked.
    if (isset($node->fridge_post_graph) && count($node->fridge_post_graph)) {
      $form['status']['#title'] = t('Post another link to this %type on Facebook.', array('%type' => $node->type));
      $form['status']['#default_value'] = FALSE;
      $form['status']['#description'] = t('Already posted %count time(s).', array(
                                            '%count' => count($node->fridge_post_graph),
                                          ));

      // Debugging...
      /*
      foreach ($node->fridge_post_graph as $row) {
        $form['debug'][$row->graph_id] = array(
          '#markup' => l($row->graph_id, url("https://graph.facebook.com/{$row->graph_id}", array(
                                               'query' => array(
                                                 'access_token' => $token,
                                               ),
                                             ))),
        );
      }
      */
      // end debug

    }

    $form['message'] = array(
      '#type' => 'textfield',
      '#title' => 'Message',
      '#default_value' => $defaults['message'],
      '#description' => 'A brief message to precede the link.',
    );

    $form['access_token'] = array('#type' => 'value', '#value' => $token);

    $form['feed_id'] = array(
      '#type' => 'select',
      '#title' => 'Publish to',
      '#options' => $page_options,
      '#default_value' => $defaults['feed_id'],
      '#description' => 'You may select a user\'s wall, or a managed page.',
    );

    $form['account_id'] = array(
      '#type' => 'select',
      '#title' => 'Published by',
      '#options' => $page_options,
      '#defaults' => $defaults['account_id'],
      '#description' => 'Post as a user, or as a page.',
    );
    $form['data'] = array('#tree' => TRUE);
  }
  catch (Exception $e) {
    fridge_log_exception($e, 'Post to Facebook settings not available.');
    $form['error'] = array(
      '#markup' => t('Unable to connect with facebook, possibly authorization has expired.  <a href=!url target=_blank>Reset your authorization</a>, then refresh this form to see all options.', array(
                       '!url' => url(FRIDGE_POST_PATH_ADMIN),
                     )),
    );
  }

  return $form;
}

function fridge_post_entity_publish_form($form, &$form_state, $entity) {
  if ($token = variable_get('fridge_access_token', NULL)) {
    $form['fridge'] = array(
      '#type' => 'fieldset',
      '#title' => t('Post to Facebook'),
      '#description' => t('Post to facebook using site-wide settings'),
    );
    $form['fridge']['fridge_post_settings'] = _fridge_post_node_settings_form(array(), $form_state, $entity, $token);
    $form['fridge']['fridge_post_settings']['status'] = array('#type' => 'value', '#value' => 1);
    $form['fridge']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Post to Facebook'),
    );
    $form['#entity'] = $entity;
  }

  return $form;
}

function fridge_post_entity_publish_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  fridge_post_publish_node($values['fridge_post_settings'], $form['#entity']);
}


//// Cron support


function fridge_post_cron() {
  $debug = FALSE; // debug
  $throttle = variable_get('fridge_post_cron_throttle', 1);
  $token = variable_get('fridge_access_token', NULL);
  $do_comments = variable_get('fridge_post_cross_post_comments', FALSE);

  if ($throttle && $token && $do_comments) {
    $result = db_query("SELECT * FROM {fridge_post_graph} ORDER BY last_cron");
    if ($debug) print("<pre>");
    if ($debug) print_r($GLOBALS['user']); // just checking who cron is run as.
    foreach ($result as $item) {
      try {
        if ($debug) print_r($item);
        if ($item->entity_type == 'node') {
          $info = fridge_graph($item->graph_id, $token);
          if ($debug) print_r($info);

          // @TODO - respect comment privacy???

          if ($info['comments']['count']) {
            $node = node_load($item->entity_id);
            foreach ($info['comments']['data'] as $fb_comment) {
              $result2 = db_query("SELECT * FROM {fridge_post_graph} WHERE graph_id=:graph_id", array(':graph_id' => $fb_comment['id']));
              $item2 = $result2->fetchObject();
              if ($item2->entity_id) {
                // The comment is already saved locally.
              }
              else {
                // Add the comment to drupal.
                if ($debug) print_r($fb_comment);
                $author_info = fridge_graph($fb_comment['from']['id'], $token);
                if ($debug) print_r($author_info);
                $fake_comment = new stdClass();
                $fake_comment->nid = $node->nid;
                $fake_comment->name = $fb_comment['from']['name'];
                $fake_comment->homepage = $author_info['link'];
                // @TODO - get created date from $fb_comment['created_time']
                $fake_comment->language = LANGUAGE_NONE;
                $fake_comment->comment_body[$fake_comment->language][0]['value'] = $fb_comment['message'];
                $fake_state = array(
                  'values' => array(
                    'op' => t('Save'),
                  ),
                );
                // Give us permission
                $old_perm = user_access('post comments'); // Must call user_access to make sure its not empty.
                $perm = &drupal_static('user_access');
                if ($debug) print_r($perm);
                $perm[$GLOBALS['user']->uid]['post comments'] = TRUE;
                if ($debug) print_r(drupal_static('user_access'));
                $result3 = drupal_form_submit("comment_node_{$node->type}_form", $fake_state, $fake_comment);
                $perm[$GLOBALS['user']->uid]['post comments'] = $old_perm;
                if ($debug) print_r($result3);
                if ($debug) print_r($fake_state);
                if ($cid = $fake_state['values']['cid']) {
                  // The comment was saved.
                  db_query("INSERT INTO {fridge_post_graph} (entity_id, entity_type, graph_id, actor_id, last_cron) VALUES (:entity_id, :entity_type, :graph_id, :actor_id, :last_cron)", array(
                             ':entity_id' => $cid,
                             ':entity_type' => 'comment',
                             ':graph_id' => $fb_comment['id'],
                             ':actor_id' => $fb_comment['from']['id'],
                             ':last_cron' => REQUEST_TIME,
                           ));
                }
              }
            }
          }
        } // end if entity_type == node
        // Mark item as visited during this cron job.
        db_query("UPDATE {fridge_post_graph} SET last_cron = :last_cron WHERE graph_id=:graph_id", array(
                   ':last_cron' => REQUEST_TIME,
                   ':graph_id' => $item->graph_id,
                 ));
      } catch (Exception $e) {
        // Could be just an expired token.
        $message = '%function failed to process %type %id.  %reason';
        $args = array(
          '%function' => __FUNCTION__,
          '%type' => $item->entity_type,
          '%id' => $item->entity_id,
          '%reason' => $e->getMessage(),
        );
        watchdog('fridge', $message, $args, WATCHDOG_WARNING);
      }
    } // end foreach $result as $item.

    if ($debug) print("</pre>");
  }
}
